{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "currenttime": {
      "Type": "String"
    }
  },
  "Resources": {
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "AllowLogs",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:*",
                    "lambda:*"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "CFNWaiter": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.lambda_handler",
        "Runtime": "python3.9",
        "Timeout": 900,
        "Role": {
          "Fn::GetAtt": "LambdaExecutionRole.Arn"
        },
        "Code": {
          "ZipFile": {
            "Fn::Sub": "import time\nimport json\nimport boto3\nimport cfnresponse\ntime.sleep(15)\ndef lambda_handler(event, context):\n FunctionName=event['ResourceProperties']['FunctionName']\n try:\n   client = boto3.client('lambda')\n   response = client.list_versions_by_function(\n       FunctionName=event['ResourceProperties']['FunctionName']\n   )\n   print(f\"Versions for Lambda function: {FunctionName}\")\n   published_versions = [int(v['Version']) for v in response['Versions'] if v['Version'] != '$LATEST']\n   for version_info in response['Versions']:\n       print(f\"Version: {version_info['Version']}\")\n   latest_published_version_number = max(published_versions)\n   print(f\"Latest published version number: {latest_published_version_number}\")\n   Total_versions = response['Versions']\n   versions_to_delete = []\n   for version in Total_versions:\n         if version['Version'] != '$LATEST':\n         # Add logic here to determine which versions to delete\n         # For example, to keep the 2 latest published versions:\n                 if int(version['Version']) < (latest_published_version_number - 0):\n                   versions_to_delete.append(version['Version'])\n   print(f\"Versions to delete: {versions_to_delete}\")\n   for version_number in versions_to_delete:\n           client.delete_function(FunctionName=FunctionName, Qualifier=version_number)\n           print(f\"Deleted version of function {FunctionName}\")\n   cfnresponse.send(event, context, cfnresponse.SUCCESS, response)\n except Exception as e:\n           print(f\"Error deleting version {e}\")\n           cfnresponse.send(event, context, cfnresponse.FAILED, response)\n"
          }
        }
      }
    },
    "CFNWaiterCustomResource": {
      "Type": "AWS::CloudFormation::CustomResource",
      "DependsOn": "MyLambdaFunction",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": "CFNWaiter.Arn"
        },
        "FunctionName": {
          "Ref": "MyLambdaFunction"
        },
        "Time": {
          "Ref": "currenttime"
        }
      }
    },
    "MyLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "demotfbucket",
          "S3Key": "lambda/demolambda_function2.zip"
        },
        "Handler": "app.lambda_handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": "LambdaExecutionRole.Arn"
        },
        "Runtime": "python3.9",
        "Timeout": 30,
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          }
        ]
      }
    },
    "MyLambdaFunctionVersion5e32d6233b": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "MyLambdaFunction"
        }
      }
    },
    "MyLambdaFunctionAliaslive2": {
      "Type": "AWS::Lambda::Alias",
      "Properties": {
        "Name": "live2",
        "FunctionName": {
          "Ref": "MyLambdaFunction"
        },
        "FunctionVersion": {
          "Fn::GetAtt": [
            "MyLambdaFunctionVersion5e32d6233b",
            "Version"
          ]
        }
      }
    }
  }
}