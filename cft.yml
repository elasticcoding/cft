AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Parameters:
  CurrentTime:
    Type: String
Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: AllowLogs
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                  - lambda:*
                Resource: '*'
  MyLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda.lambda_handler
      Runtime: python3.9
      CodeUri: s3://demotfbucket/lambda/lambda3.zip
      MemorySize: 128
      Timeout: 30
      AutoPublishAliasAllProperties: true
      Role: !GetAtt LambdaExecutionRole.Arn
      AutoPublishAlias: live
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: 2
  CFNWaiter:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.9
      Timeout: 900
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: !Sub |
          import time
          import json
          import boto3
          import cfnresponse
          def lambda_handler(event, context):
           FunctionName=event['ResourceProperties']['FunctionName']
           try:
             client = boto3.client('lambda')
             response = client.list_versions_by_function(
                 FunctionName=event['ResourceProperties']['FunctionName']
             )
             print(f"Versions for Lambda function: {FunctionName}")
             published_versions = [int(v['Version']) for v in response['Versions'] if v['Version'] != '$LATEST']
             for version_info in response['Versions']:
                 print(f"Version: {version_info['Version']}")
             latest_published_version_number = max(published_versions)
             print(f"Latest published version number: {latest_published_version_number}")
             #get_alias = client.get_alias(FunctionName=FunctionName, Name='live')
             #print(f"Alias Version: get_alias['FunctionVersion']")
             #if int(get_alias['FunctionVersion']) != latest_published_version_number :
               #print(f"Alias Version in if: get_alias['FunctionVersion']")
               #update_alias=client.update_alias(FunctionName=FunctionName,  Name='live', FunctionVersion=str(latest_published_version_number))
             Total_versions = response['Versions']
             versions_to_delete = []
             for version in Total_versions:
                   if version['Version'] != '$LATEST':
                   # Add logic here to determine which versions to delete
                   # For example, to keep the 2 latest published versions:
                           if int(version['Version']) < (latest_published_version_number - 0):
                             versions_to_delete.append(version['Version'])
             print(f"Versions to delete: {versions_to_delete}")
             time.sleep(300)
             for version_number in versions_to_delete:
                     client.delete_function(FunctionName=FunctionName, Qualifier=version_number)
                     print(f"Deleted version {version_number} of function {FunctionName}")
             cfnresponse.send(event, context, cfnresponse.SUCCESS, response)
           except Exception as e:
                     print(f"Error deleting version {e}")
                     cfnresponse.send(event, context, cfnresponse.FAILED, response)
  CFNWaiterCustomResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt CFNWaiter.Arn
      FunctionName: !Ref MyLambdaFunction
      Time: !Ref CurrentTime
